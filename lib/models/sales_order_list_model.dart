// To parse this JSON data, do
//
//     final salesOrderListModel = salesOrderListModelFromJson(jsonString);

import 'dart:convert';

List<SalesOrderListModel> salesOrderListModelFromJson(String str) =>
    List<SalesOrderListModel>.from(
        json.decode(str).map((x) => SalesOrderListModel.fromJson(x)));

String salesOrderListModelToJson(List<SalesOrderListModel> data) =>
    json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class SalesOrderListModel {
  String tokenNo;
  String refNo;
  String trDate;
  String poNo;
  String optRefNo;
  String optDate;
  String drId;
  String crId;
  String address;
  String agentId;
  String paymentTermsId;
  String taxTotal;
  String cessTotal;
  String grandTotal;
  String insurance;
  String approval;
  String shipment;
  String destination;
  String labels;
  String documentRequired;
  String condtion;
  String accountDr;
  String drCode;
  String accountCr;
  String crCode;
  String paymentTerms;
  String agentName;
  String consignee;
  String consigneeInInvoice;
  String notifyParty;
  String consigneeInHc;
  String testRequired;
  String bankDetails;
  String courierAdd;
  String health;
  String blDetails;
  String brand;
  String shippingLIne;
  String temperature;
  String legalization;
  String shipDate;
  String addressSlr;
  String regNo;
  String id;
  String tType;
  String remarks;
  String active;
  String companyId;
  String branchId;
  String faId;
  String userId;
  String updateDate;
  String days;
  String isHold;
  String isRelease;
  String isPrtalRelze;
  String disPerVal;
  String discount;
  String isZeroRate;

  SalesOrderListModel({
    required this.tokenNo,
    required this.refNo,
    required this.trDate,
    required this.poNo,
    required this.optRefNo,
    required this.optDate,
    required this.drId,
    required this.crId,
    required this.address,
    required this.agentId,
    required this.paymentTermsId,
    required this.taxTotal,
    required this.cessTotal,
    required this.grandTotal,
    required this.insurance,
    required this.approval,
    required this.shipment,
    required this.destination,
    required this.labels,
    required this.documentRequired,
    required this.condtion,
    required this.accountDr,
    required this.drCode,
    required this.accountCr,
    required this.crCode,
    required this.paymentTerms,
    required this.agentName,
    required this.consignee,
    required this.consigneeInInvoice,
    required this.notifyParty,
    required this.consigneeInHc,
    required this.testRequired,
    required this.bankDetails,
    required this.courierAdd,
    required this.health,
    required this.blDetails,
    required this.brand,
    required this.shippingLIne,
    required this.temperature,
    required this.legalization,
    required this.shipDate,
    required this.addressSlr,
    required this.regNo,
    required this.id,
    required this.tType,
    required this.remarks,
    required this.active,
    required this.companyId,
    required this.branchId,
    required this.faId,
    required this.userId,
    required this.updateDate,
    required this.days,
    required this.isHold,
    required this.isRelease,
    required this.isPrtalRelze,
    required this.disPerVal,
    required this.discount,
    required this.isZeroRate,
  });

  factory SalesOrderListModel.fromJson(Map<String, dynamic> json) =>
      SalesOrderListModel(
        tokenNo: json["TokenNo"],
        refNo: json["RefNo"],
        trDate: json["TrDate"],
        poNo: json["PoNo"],
        optRefNo: json["OptRefNo"],
        optDate: json["OptDate"],
        drId: json["DrId"],
        crId: json["CrId"],
        address: json["Address"],
        agentId: json["AgentId"],
        paymentTermsId: json["PaymentTermsId"],
        taxTotal: json["TaxTotal"],
        cessTotal: json["CessTotal"],
        grandTotal: json["GrandTotal"],
        insurance: json["Insurance"],
        approval: json["Approval"],
        shipment: json["Shipment"],
        destination: json["Destination"],
        labels: json["Labels"],
        documentRequired: json["DocumentRequired"],
        condtion: json["Condtion"],
        accountDr: json["AccountDr"],
        drCode: json["DrCode"],
        accountCr: json["AccountCr"],
        crCode: json["CrCode"],
        paymentTerms: json["PaymentTerms"],
        agentName: json["AgentName"],
        consignee: json["Consignee"],
        consigneeInInvoice: json["ConsigneeInInvoice"],
        notifyParty: json["NotifyParty"],
        consigneeInHc: json["ConsigneeInHc"],
        testRequired: json["TestRequired"],
        bankDetails: json["BankDetails"],
        courierAdd: json["CourierAdd"],
        health: json["Health"],
        blDetails: json["BlDetails"],
        brand: json["Brand"],
        shippingLIne: json["ShippingLIne"],
        temperature: json["Temperature"],
        legalization: json["Legalization"],
        shipDate: json["ShipDate"],
        addressSlr: json["AddressSlr"],
        regNo: json["RegNo"],
        id: json["Id"],
        tType: json["TType"],
        remarks: json["Remarks"],
        active: json["Active"],
        companyId: json["CompanyId"],
        branchId: json["BranchId"],
        faId: json["FaId"],
        userId: json["UserId"],
        updateDate: json["UpdateDate"],
        days: json["Days"],
        isHold: json["IsHold"],
        isRelease: json["IsRelease"],
        isPrtalRelze: json["IsPrtalRelze"],
        disPerVal: json["DisPerVal"],
        discount: json["Discount"],
        isZeroRate: json["IsZeroRate"],
      );

  Map<String, dynamic> toJson() => {
        "TokenNo": tokenNo,
        "RefNo": refNo,
        "TrDate": trDate,
        "PoNo": poNo,
        "OptRefNo": optRefNo,
        "OptDate": optDate,
        "DrId": drId,
        "CrId": crId,
        "Address": address,
        "AgentId": agentId,
        "PaymentTermsId": paymentTermsId,
        "TaxTotal": taxTotal,
        "CessTotal": cessTotal,
        "GrandTotal": grandTotal,
        "Insurance": insurance,
        "Approval": approval,
        "Shipment": shipment,
        "Destination": destination,
        "Labels": labels,
        "DocumentRequired": documentRequired,
        "Condtion": condtion,
        "AccountDr": accountDr,
        "DrCode": drCode,
        "AccountCr": accountCr,
        "CrCode": crCode,
        "PaymentTerms": paymentTerms,
        "AgentName": agentName,
        "Consignee": consignee,
        "ConsigneeInInvoice": consigneeInInvoice,
        "NotifyParty": notifyParty,
        "ConsigneeInHc": consigneeInHc,
        "TestRequired": testRequired,
        "BankDetails": bankDetails,
        "CourierAdd": courierAdd,
        "Health": health,
        "BlDetails": blDetails,
        "Brand": brand,
        "ShippingLIne": shippingLIne,
        "Temperature": temperature,
        "Legalization": legalization,
        "ShipDate": shipDate,
        "AddressSlr": addressSlr,
        "RegNo": regNo,
        "Id": id,
        "TType": tType,
        "Remarks": remarks,
        "Active": active,
        "CompanyId": companyId,
        "BranchId": branchId,
        "FaId": faId,
        "UserId": userId,
        "UpdateDate": updateDate,
        "Days": days,
        "IsHold": isHold,
        "IsRelease": isRelease,
        "IsPrtalRelze": isPrtalRelze,
        "DisPerVal": disPerVal,
        "Discount": discount,
        "IsZeroRate": isZeroRate,
      };
}
